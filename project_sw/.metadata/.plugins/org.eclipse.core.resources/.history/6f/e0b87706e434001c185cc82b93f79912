/******************************************************************
 * This is the main file for the Software Sessions
 *
 */

#include <stdint.h>
#include <inttypes.h>

#include "common.h"
//#include "montgomery.h"

// Uncomment for Session SW1
//extern void warmup();

// Uncomment for Session SW2 onwards
#include "mp_arith.h"
#include "montgomery.h"
#include "asm_func.h"

void printResult(uint32_t *in) {
	int32_t i;

//    xil_printf("%s = ",str);
	for (i = 0; i < 32; i++) {
		xil_printf("0x%x,", in[i]);
	}
	xil_printf("\n\r");
}

int main() {
	init_platform();
	init_performance_counters(1);

	// SW3: montgomery multiplication
	//----------------------
	uint32_t a[32] = { 0x5facf67b, 0x7d65c9b4, 0x7ddcd628, 0xd7261022,
			0xd25acd49, 0xa14672a3, 0x930cc12c, 0x88ab5675, 0xdfd1b9c7,
			0x861db300, 0xe1363907, 0xa53e0e2e, 0xe9311805, 0x00cc7527,
			0x73e5ef89, 0x2659d8f1, 0x37a3e765, 0x45f7bf6e, 0x4d62409a,
			0x3906d1d4, 0xae72d12d, 0x6edf3e44, 0x717df2cb, 0x5a591393,
			0x4e52273a, 0x6fdcda98, 0x61630ea2, 0x3fd8def3, 0x7d91aad4,
			0x650646d7, 0x73b6f67b, 0x80a8d4d9 };
	uint32_t b[32] = { 0xb32748e4, 0x96619acc, 0xc359cf2c, 0x8c8c699d,
			0xc09652d4, 0xfe561950, 0x4419504c, 0x259b358b, 0xbaca10a4,
			0xc33708ee, 0x0bd02702, 0x306ca74f, 0x00d44b48, 0xecc756a4,
			0x2ce288a6, 0xa36c8c73, 0x660f9f94, 0xfb962fa3, 0x6317389d,
			0x38e26232, 0x50c53686, 0x10cdf8aa, 0xe89e5f3f, 0x157e126a,
			0x83778648, 0x164238a2, 0xdce14eb9, 0x2de1eb15, 0x6858ea3b,
			0xa301beb0, 0x5d5a0a0f, 0x80877761 };
	uint32_t n[32] = { 0xd42c6957, 0x8057ca3f, 0x9bff22b0, 0x53ee5714,
			0xf8b2a143, 0x2c8a4d42, 0x1c2a6670, 0x328dbfd1, 0xaafaa05d,
			0x32a79014, 0x75d52a4e, 0x7113b1d4, 0xbeb07f97, 0x212462ee,
			0xb4c66a6d, 0xbb8a041a, 0x1a44b021, 0x758636c2, 0xd2272272,
			0xf60caeab, 0xaf573875, 0x8678d617, 0xa4554110, 0x78ddd0a2,
			0xbd6e6f98, 0x8b00ae19, 0x8e85aecc, 0x8c26f487, 0x1d7abb8d,
			0x10bff648, 0x24dfe86f, 0x8172bfa7 };
	uint32_t n_prime[32] = { 0x9c5d6d99, 0x1b735550, 0x8696fe2a, 0x35d25c40,
			0x80a1607e, 0xaed29a24, 0x4243809e, 0xafe2811c, 0x59ec620b,
			0x7eb814b2, 0xab7655e1, 0x8ac8cb16, 0x0af58731, 0x39dd74a5,
			0x556c2292, 0xc7ab544a, 0xb6b2c2fb, 0xab9cf47f, 0x62ac0630,
			0x70e34e36, 0xced94d8c, 0x1861391b, 0xf0b81108, 0xc4739558,
			0xb4a12f48, 0x82f5e240, 0xeb3a1902, 0x21ac4e81, 0x4547aad8,
			0xcbcf6c09, 0xdd7056ab, 0x05c7b104 };
	uint32_t gt[32] = { 0xb6d26cce, 0xed113311, 0x9a083aba, 0xe6646e47,
			0x9caf57e5, 0x76c0c793, 0xd517dc32, 0x844bdf76, 0x5d30c00e,
			0x745ac52a, 0xff87dd9a, 0x7f76a4af, 0x7409caba, 0x23f7c2b5,
			0x243bc841, 0x4ce86c8e, 0x1891b502, 0xc827b302, 0xa7d346b7,
			0x26961ffb, 0x7777a7e0, 0x19652e50, 0xbfbf1309, 0x266c76e1,
			0x64e384dc, 0x6e4c539c, 0x3418e250, 0x21fb3d91, 0x347229bb,
			0x6cd87cc7, 0x195d85c9, 0x777ecb0b };

	uint32_t res[33];

	uint64_t sum = 0xF00000000000000F;
	uint32_t C = 1, S = 2;

	START_TIMING
//	montMul(a, b, n, n_prime, res, 32);
	sum = 1 + (uint64_t)(C) * (uint64_t)(S);
	STOP_TIMING
	xil_printf("0x%x\r\n", sum);

//	printResult(res);

	cleanup_platform();

	return 0;
}
